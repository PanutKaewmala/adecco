lint-angular:
  stage: lint
  image: node:14-alpine3.11
  rules:
    - if: '$CI_MERGE_REQUEST_IID'
      changes:
        - angular/**/*
  before_script:
    - cd angular
    - npm ci --cache .npm --prefer-offline
  script:
    - npm run lint
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/

build-angular:
  extends:
    - .docker
  stage: build
  needs:
    - job: lint-angular
      optional: true
  rules:
    - if: '$CI_MERGE_REQUEST_IID || $CI_COMMIT_BRANCH == "main"'
      changes:
        - angular/**/*
  script:
    - docker pull $CI_REGISTRY_IMAGE/angular || true
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
    - >
      docker build
      --pull
      --cache-from $CI_REGISTRY_IMAGE/angular
      --tag $CI_REGISTRY_IMAGE/angular:$CI_COMMIT_SHA
      ./angular
    - echo -n $CI_JOB_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE/angular:$CI_COMMIT_SHA

push-angular:
  extends:
    - .push
  needs: [ "build-angular" ]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - angular/**/*
  variables:
    APPLICATION: angular

deploy-angular:
  extends: .deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      changes:
        - angular/**/*
      variables:
        ENV: dev
    - if: '$CI_COMMIT_TAG =~ /^v[0-9-\.]+/'
      changes:
        - angular/**/*
      variables:
        ENV: prod
  resource_group: deploy-angular
  script:
    - !reference [.docker, before_script]
    - docker pull $CI_REGISTRY_IMAGE/angular
    - >
      docker run
      -v $CI_PROJECT_DIR/angular/dist:/opt/app/dist
      --rm
      $CI_REGISTRY_IMAGE/angular
      sh -c
      "
        npm run build:$CI_ENVIRONMENT_NAME
      "
    - scp -P $DEPLOY_PORT -rp ./angular/dist $DEPLOY_USER@$DEPLOY_IP:$DEPLOY_REMOTE_PATH/.docker_volumes/angular
